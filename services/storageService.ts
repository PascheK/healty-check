'use client';

import { openDB, IDBPDatabase } from 'idb';

// üîß Nom de la base de donn√©es et du store
const DB_NAME = 'healthy-check-db';
const STORE_NAME = 'storage';

// üîµ Promesse partag√©e (singleton)
let dbPromise: Promise<IDBPDatabase<any>> | null = null;

// üîµ Fonction d'acc√®s (ou cr√©ation) √† la base IndexedDB
async function getDB(): Promise<IDBPDatabase<any>> {
  if (typeof window === 'undefined') {
    throw new Error('IndexedDB n‚Äôest pas disponible c√¥t√© serveur');
  }

  // Si aucune promesse n‚Äôexiste encore
  if (!dbPromise) {
    dbPromise = openDB(DB_NAME, undefined, {
      upgrade(db) {
        if (!db.objectStoreNames.contains(STORE_NAME)) {
          db.createObjectStore(STORE_NAME);
          console.log('üì¶ Object store "storage" cr√©√© (ou r√©par√©)');
        }
      },
    });
  } else {
    // V√©rifie si le store existe vraiment (par s√©curit√©)
    const db = await dbPromise;
    if (!db.objectStoreNames.contains(STORE_NAME)) {
      db.close();
      const newVersion = db.version + 1;
      dbPromise = openDB(DB_NAME, newVersion, {
        upgrade(upgradeDb) {
          if (!upgradeDb.objectStoreNames.contains(STORE_NAME)) {
            upgradeDb.createObjectStore(STORE_NAME);
            console.log('üì¶ Object store "storage" recr√©√© apr√®s v√©rification');
          }
        },
      });
    }
  }

  return dbPromise;
}

// üîß Service de stockage g√©n√©rique
export const storageService = {
  // ‚úÖ √âcriture d‚Äôune valeur
  async setItem(key: string, value: any): Promise<void> {
    try {
      const db = await getDB();
      await db.put(STORE_NAME, value, key);
    } catch (error) {
      console.warn('‚ö†Ô∏è IndexedDB indisponible, fallback localStorage', error);
      try {
        localStorage.setItem(key, JSON.stringify(value));
      } catch (e) {
        console.error('‚ùå localStorage √©galement indisponible :', e);
      }
    }
  },

  // ‚úÖ Lecture d‚Äôune valeur
  async getItem<T = any>(key: string): Promise<T | null> {
    try {
      const db = await getDB();
      const result = await db.get(STORE_NAME, key);
      return result ?? null;
    } catch (error) {
      console.warn('‚ö†Ô∏è IndexedDB indisponible, fallback localStorage', error);
      try {
        const item = localStorage.getItem(key);
        return item ? JSON.parse(item) : null;
      } catch (e) {
        console.error('‚ùå Erreur lecture localStorage :', e);
        return null;
      }
    }
  },

  // ‚úÖ Suppression d‚Äôune valeur
  async removeItem(key: string): Promise<void> {
    try {
      const db = await getDB();
      await db.delete(STORE_NAME, key);
    } catch (error) {
      console.warn('‚ö†Ô∏è IndexedDB indisponible, fallback localStorage', error);
      try {
        localStorage.removeItem(key);
      } catch (e) {
        console.error('‚ùå √âchec suppression localStorage :', e);
      }
    }
  },
};
